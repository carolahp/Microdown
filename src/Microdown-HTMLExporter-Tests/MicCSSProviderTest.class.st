"
A MicCSSProviderTest is a test class for testing the behavior of MicCSSProvider
"
Class {
	#name : 'MicCSSProviderTest',
	#superclass : 'TestCase',
	#instVars : [
		'cssProvider'
	],
	#category : 'Microdown-HTMLExporter-Tests-CSS',
	#package : 'Microdown-HTMLExporter-Tests',
	#tag : 'CSS'
}

{ #category : 'accessing' }
MicCSSProviderTest >> cssProvider [
	" Answer the cssProvider of this MicCSSProviderTest "

	^ cssProvider
]

{ #category : 'accessing' }
MicCSSProviderTest >> cssProvider: anObject [
	" Sets the cssProvider of this MicCSSProviderTest "

	cssProvider := anObject
]

{ #category : 'running' }
MicCSSProviderTest >> setUp [

	super setUp.
	cssProvider := MicCSSProvider new.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testCssDownloader [

	| downloader |
	downloader := cssProvider cssDownloader.
	self assert: (downloader isKindOf: MicCSSDownloader).
	self assert: downloader class equals: MicCSSDownloader.
	self assert: downloader destinationPath equals: 'pharo-local/iceberg/Pillar-markup/Microdown/ressource/'.
	self assert: downloader httpClient class equals: ZnClient.
	self deny: downloader httpClient isConnected.
	self
		assert: downloader httpClient applicationFormUrlEncodedEntity class
		equals: ZnApplicationFormUrlEncodedEntity.
	self
		assert: downloader httpClient applicationFormUrlEncodedEntity contentType class
		equals: ZnMimeType.
	self
		assert: downloader httpClient applicationFormUrlEncodedEntity fields class
		equals: ZnMultiValueDictionary.
	self assert: downloader httpClient applicationFormUrlEncodedEntity hasContentType.
	self
		assert: downloader httpClient applicationFormUrlEncodedEntity contentLength
		equals: 0.
	self assert: downloader httpClient applicationFormUrlEncodedEntity hasContentLength.
	self assert: downloader httpClient applicationFormUrlEncodedEntity isEmpty.
	self
		assert: downloader httpClient applicationFormUrlEncodedEntity contents class
		equals: ZnMultiValueDictionary.

	self assert: downloader httpClient connection isNil.
	self assert: downloader httpClient request class equals: ZnRequest.
	self assert: downloader httpClient request isHttp11.
	self
		assert: downloader httpClient request requestLine class
		equals: ZnRequestLine.
	self assert: downloader httpClient request server isNil.
	self deny: downloader httpClient request hasSession.
	self
		assert: downloader httpClient request cookies class
		equals: Array.
	self assertEmpty: downloader httpClient request cookies.
	self assert: downloader httpClient request absoluteUrl isNil.

	self deny: downloader httpClient request isConnectionKeepAlive.
	self assert: downloader httpClient request host isNil.
	self deny: downloader httpClient request isHttp10.

	self assert: downloader httpClient request uri isNil.
	self assert: downloader httpClient request accept equals: '*/*'.
	self deny: downloader httpClient request wantsConnectionClose.
	self deny: downloader httpClient request isConnectionClose.
	self deny: downloader httpClient request acceptsEncodingGzip.

	self
		assert: downloader cssProvider newCssDownloader httpClient class
		equals: ZnClient.
	self
		assert: downloader cssProvider newCssDownloader cssProvider class
		equals: MicCSSProvider.
	self
		assert: downloader cssProvider newCssDownloader frameworks class
		equals: Array.

	self assert: downloader frameworks class equals: Array.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testDefaultFramework [

	self assert: (cssProvider class defaultFramework isKindOf: String).
	self deny: cssProvider class defaultFramework isEmpty
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testDefaultFrameworks [

	self assert: (cssProvider defaultFrameworks isKindOf: Collection).
	self assert: (cssProvider frameworks allSatisfy: [ : frw | frw isKindOf: MicCSSFramework ])
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testDestinationPath [

	self assert: (cssProvider destinationPath isKindOf: String).
	cssProvider destinationPath: FileSystem workingDirectory fullName.
	
	self assert: cssProvider destinationPath equals: FileSystem workingDirectory fullName.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testFindCssNamed [

	| attriCss sampleCss |
	attriCss := MicCSSFramework new
		            name: 'AttriCSS';
		            yourself.
	sampleCss := cssProvider findCssNamed: 'AttriCSS'.
	self
		should: [ cssProvider findCssNamed: String empty ]
		raise: NotFound.

	self
		should: [ cssProvider findCssNamed: 'c30ba728-32a0-0d00-af65-cfc80a260270' ]
		raise: NotFound.
	self should: [ cssProvider findCssNamed: nil ] raise: NotFound.

	self assert: sampleCss name equals: attriCss name.
	self assert: attriCss class equals: MicCSSFramework.
	self assert: attriCss minCssFile isNil.
	self deny: attriCss hasMinifiedVersion.
	self assert: attriCss resetUrl isEmpty.
	self assert: attriCss themes isEmpty.
	self assert: attriCss projectUrl isEmpty.
	self assert: attriCss name equals: 'AttriCSS'.
	self assert: attriCss cssUrl isNil.
	self assert: attriCss fonts isEmpty.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testForCSSNamed [
	
	| tufte |
	self should: [ MicCSSProvider forCSSNamed: 'XXXXXXXX' ] raise: NotFound.
	tufte := MicCSSProvider forCSSNamed: 'Tufte'.

	self assert: (tufte isKindOf: MicCSSFramework)	.
	self assert: tufte name equals: 'Tufte'.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testFrameworks [

	| frws |
	frws := cssProvider frameworks.
	self assert: (frws isKindOf: Collection).
	self assert: frws class equals: Array.
]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testFrameworksSpecs [

	| frwSpecs |
	frwSpecs := cssProvider frameworksSpecs.
	self assert: (frwSpecs isKindOf: Collection).
	self assert: frwSpecs class equals: Array.

]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testHasFrameworksInstalled [

	self assert: (cssProvider hasFrameworksInstalled isKindOf: Boolean).

]

{ #category : 'autogenerated' }
MicCSSProviderTest >> testNewCssDownloader [

	self assert: (cssProvider newCssDownloader isKindOf: MicCSSDownloader).

]
